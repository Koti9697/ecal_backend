# Generated by Django 5.2.5 on 2025-09-20 08:57

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Privilege',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The code name for the privilege, e.g., MANAGE_USERS', max_length=100, unique=True)),
                ('description', models.CharField(help_text='A user-friendly description of what this privilege allows.', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enforce_unique_usernames', models.BooleanField(default=True)),
                ('enforce_password_complexity', models.BooleanField(default=True)),
                ('password_complexity_regex', models.CharField(default='^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\W_]).+$', help_text='Regex for password complexity. Default checks for at least one lowercase, one uppercase, one number, and one special character.', max_length=255)),
                ('username_min_length', models.PositiveIntegerField(default=3)),
                ('username_max_length', models.PositiveIntegerField(default=15)),
                ('username_force_lowercase', models.BooleanField(default=True, help_text='Force all usernames to be saved in lowercase.')),
                ('username_allow_capitals', models.BooleanField(default=True)),
                ('username_allow_numbers', models.BooleanField(default=True)),
                ('allow_user_account_closure', models.BooleanField(default=False, help_text='Allow users to initiate closing their own account.')),
                ('password_prevent_username_sequence', models.BooleanField(default=True, help_text='Block passwords containing 4+ characters of the username.')),
                ('password_expiry_days', models.PositiveIntegerField(default=90)),
                ('password_lockout_attempts', models.PositiveIntegerField(default=5)),
                ('password_lockout_duration', models.PositiveIntegerField(default=15, help_text='Lockout duration in minutes.')),
                ('admin_only_unlock', models.BooleanField(default=True, help_text='If true, only an admin can unlock a locked account.')),
                ('deactivate_idle_user_days', models.PositiveIntegerField(default=180, help_text='Number of days of inactivity before a user account is automatically disabled.')),
                ('password_history_count', models.PositiveIntegerField(default=5, help_text='Number of previous passwords to store and prevent reuse of.')),
                ('password_min_length', models.PositiveIntegerField(default=12)),
                ('password_max_length', models.PositiveIntegerField(default=35)),
                ('password_require_small', models.BooleanField(default=True)),
                ('password_require_capital', models.BooleanField(default=True)),
                ('password_require_number', models.BooleanField(default=True)),
                ('password_require_special', models.BooleanField(default=True)),
                ('session_timeout_minutes', models.PositiveIntegerField(default=15)),
                ('session_require_relogin', models.BooleanField(default=True, help_text='Force re-authentication after session timeout.')),
                ('enforce_single_user_session', models.BooleanField(default=True)),
                ('time_zone', models.CharField(choices=[('UTC', 'UTC'), ('America/New_York', 'America/New_York (EST)'), ('Europe/London', 'Europe/London (GMT)'), ('Asia/Kolkata', 'Asia/Kolkata (IST)')], default='UTC', max_length=50)),
                ('date_format', models.CharField(choices=[('YYYY-MM-DD', 'YYYY-MM-DD'), ('DD-MMM-YYYY', 'DD-MMM-YYYY'), ('MM/DD/YYYY', 'MM/DD/YYYY')], default='YYYY-MM-DD', max_length=20)),
                ('time_format', models.CharField(choices=[('24_HOUR', '24-Hour (HH:mm)'), ('12_HOUR', '12-Hour (hh:mm A)')], default='24_HOUR', max_length=20)),
                ('language_default', models.CharField(choices=[('en', 'English'), ('de', 'German'), ('fr', 'French')], default='en', max_length=10)),
                ('editor_spell_check', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'System Settings',
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('action', models.CharField(max_length=255)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('details', models.TextField()),
                ('reason_for_change', models.CharField(blank=True, max_length=255, null=True)),
                ('previous_value', models.TextField(blank=True, null=True)),
                ('new_value', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ElectronicSignature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('signed_at', models.DateTimeField(auto_now_add=True)),
                ('meaning', models.CharField(max_length=100)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('signed_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PasswordHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password_hash', models.CharField(max_length=128)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Password History',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GroupProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='auth.group')),
                ('privileges', models.ManyToManyField(blank=True, to='api.privilege')),
            ],
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_id', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('major_version', models.PositiveIntegerField(default=1)),
                ('minor_version', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('VERIFIED', 'Verified'), ('SUBMITTED_FOR_REVIEW', 'Submitted for Review'), ('REVIEWED', 'Reviewed'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('RETIRED', 'Retired')], default='DRAFT', max_length=50)),
                ('document_data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='templates_created', to=settings.AUTH_USER_MODEL)),
                ('parent_template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='versions', to='api.template')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='templates_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name', '-major_version', '-minor_version'],
                'unique_together': {('template_id', 'name', 'major_version', 'minor_version')},
            },
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_id_display', models.CharField(blank=True, max_length=100, unique=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED_FOR_REVIEW', 'Submitted for Review'), ('REVIEWED', 'Reviewed'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='records_created', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.template')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password_last_changed', models.DateTimeField(default=django.utils.timezone.now)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0)),
                ('lockout_until', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RecordData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_id', models.CharField(max_length=20)),
                ('cell_value', models.TextField(blank=True, null=True)),
                ('previous_value', models.TextField(blank=True, null=True)),
                ('record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_entries', to='api.record')),
            ],
            options={
                'unique_together': {('record', 'cell_id')},
            },
        ),
    ]
